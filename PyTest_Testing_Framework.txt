PyTest Testing Framework:
# Any pytest file should start with test_ or end with _test
# pytest method names should start with test
# any code should be wrapped in method only
# -k = method name execution, -s= logs output, -v= verbose for more info- metadata
# run script> pytest <filename>
# tag test> @pytest.mark.smoke and run with -m
# skip test> pytest.mark.skip
# @pytest.mark.xfail
# fixtures are used as setup and tear down methods for test cases - conftest file to generalize.
# fixture and make it available to all test cases
# use fixture for data driven test as well.
# datadriven and parameterization ca be done with return statements in tuple format
# when you define fixture scope to the calss only, it will run once before class is initiated at the end


install pytest > pip install pytest
version > pytest --version

html report> pip install pytest-html
run> pytest --html=report.html

naming convention:
1) when you add any python test script, it must start with "test_"
ex: test_demo1.py

----------------------
def test_firstProgram():
    print("Hello")
----------------------

2) if you run this, nothing will print.
 pycharm > edit configuratin >click + > Python tests > pytest select > ok
3) select script file 
 pycharm > edit configuratin > Python tests >pytest in bin> select Script path>ok>apply>ok
4) run

Run script: below command will run multiple script which scripts are begin wiht "test_"
-------------
>py.test -v -s

Run single script:
-----------------
>py.test test_demo1.py -v -s

Run script which method name contains specific word with option -k:
ex: def test_credit_card_program():
>py.test -k credit_card -v -s

note: -v = more info, -s = logs in output, -k = method name execution.

Group run: with -m group
------------
add annotation>
@pytest.mark.smoke
def test_firstProgram():
    print("Hello")
    
> >py.test -m smoke -v -s

skip test:
------------
@pytest.mark.skip
def test_firstProgram():
    print("Hello")
    
test want to run but not in the report:
----------------------------------------
@pytest.mark.xfail


before method like setup and teardown method: fixture are used as setup and teardown methods for test cases-
---------------------------------------------
@pytest.fixture()
def setup():
    print("i will be executed first")
    yield
    print("i will executed last")


def test_fixtureDemo(setup):
    print("i will execute steps in fixtureDemo method")
    

note: if you want to use across all test scripts file, then create conftest.py and use above script into that file.
conftest.py available for all test.


if we want to run setup before all test case run and yeild(teardown) will run after all testcases then:
--------------------------------------------------------------------------------------------------------
conftest.py
============
@pytest.fixture(scope="class")
def setup():
    print("i will be executed first")
    yield
    print("i will executed last")
    
    
testcase class:
===============
@pytest.mark.usefixtures("setup")
class TestExample:

    def test_fixture_demo(self):
        print("i will execute steps in fixtureDemo method")

    def test_fixture_demo2(self):
        print("i will execute steps in fixtureDemo2 method")

    def test_fixture_demo3(self):
        print("i will execute steps in fixtureDemo3 method")

Data Driven test:
==================



